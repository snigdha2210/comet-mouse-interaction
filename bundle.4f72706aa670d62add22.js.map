{"version":3,"sources":["webpack:///./src/script.js"],"names":["container","camera","scene","renderer","uniforms","texture","rtTexture","rtTexture2","newmouse","x","y","loader","THREE","TextureLoader","onWindowResize","event","setSize","window","innerWidth","innerHeight","u_resolution","value","domElement","width","height","WebGLRenderTarget","animate","delta","requestAnimationFrame","u_mouse","u_time","render","odims","clone","u_buffer","u_renderpass","setRenderTarget","buffer","renderTexture","capturing","capturer","capture","setCrossOrigin","load","tex","wrapS","RepeatWrapping","wrapT","minFilter","LinearFilter","document","getElementById","Camera","position","z","Scene","geometry","PlaneBufferGeometry","type","Vector2","u_noise","material","ShaderMaterial","vertexShader","textContent","fragmentShader","extensions","derivatives","mesh","Mesh","add","WebGLRenderer","setPixelRatio","devicePixelRatio","appendChild","addEventListener","e","ratio","pageX","pageY","preventDefault","init","CCapture","verbose","framerate","quality","format","workersPath","isCapturing","val","stop","save","start","toggleCapture","keyCode"],"mappings":"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","file":"bundle.4f72706aa670d62add22.js","sourcesContent":["/*\r\nMost of the stuff in here is just bootstrapping. Essentially it's just\r\nsetting ThreeJS up so that it renders a flat surface upon which to draw \r\nthe shader. The only thing to see here really is the uniforms sent to \r\nthe shader. Apart from that all of the magic happens in the HTML view\r\nunder the fragment shader.\r\n*/\r\n\r\nlet container;\r\nlet camera, scene, renderer;\r\nlet uniforms;\r\n\r\nlet divisor = 1 / 10;\r\n\r\nlet newmouse = {\r\n  x: 0,\r\n  y: 0\r\n};\r\n\r\nlet loader=new THREE.TextureLoader();\r\nlet texture, rtTexture, rtTexture2;\r\nloader.setCrossOrigin(\"anonymous\");\r\nloader.load(\r\n  'https://s3-us-west-2.amazonaws.com/s.cdpn.io/982762/noise.png',\r\n  function do_something_with_texture(tex) {\r\n    texture = tex;\r\n    texture.wrapS = THREE.RepeatWrapping;\r\n    texture.wrapT = THREE.RepeatWrapping;\r\n    texture.minFilter = THREE.LinearFilter;\r\n    init();\r\n    animate();\r\n  }\r\n);\r\n\r\nfunction init() {\r\n  container = document.getElementById( 'container' );\r\n\r\n  camera = new THREE.Camera();\r\n  camera.position.z = 1;\r\n\r\n  scene = new THREE.Scene();\r\n\r\n  var geometry = new THREE.PlaneBufferGeometry( 2, 2 );\r\n  \r\n  rtTexture = new THREE.WebGLRenderTarget(window.innerWidth * .2, window.innerHeight * .2);\r\n  rtTexture2 = new THREE.WebGLRenderTarget(window.innerWidth * .2, window.innerHeight * .2);\r\n\r\n  uniforms = {\r\n    u_time: { type: \"f\", value: 1.0 },\r\n    u_resolution: { type: \"v2\", value: new THREE.Vector2() },\r\n    u_noise: { type: \"t\", value: texture },\r\n    u_buffer: { type: \"t\", value: rtTexture.texture },\r\n    u_mouse: { type: \"v2\", value: new THREE.Vector2() },\r\n    u_renderpass: { type: 'b', value: false }\r\n  };\r\n\r\n  var material = new THREE.ShaderMaterial( {\r\n    uniforms: uniforms,\r\n    vertexShader: document.getElementById( 'vertexShader' ).textContent,\r\n    fragmentShader: document.getElementById( 'fragmentShader' ).textContent\r\n  } );\r\n  material.extensions.derivatives = true;\r\n\r\n  var mesh = new THREE.Mesh( geometry, material );\r\n  scene.add( mesh );\r\n\r\n  renderer = new THREE.WebGLRenderer();\r\n  renderer.setPixelRatio( window.devicePixelRatio );\r\n\r\n  container.appendChild( renderer.domElement );\r\n\r\n  onWindowResize();\r\n  window.addEventListener( 'resize', onWindowResize, false );\r\n  \r\n\r\n  document.addEventListener('pointermove', (e)=> {\r\n    let ratio = window.innerHeight / window.innerWidth;\r\n    newmouse.x = (e.pageX - window.innerWidth / 2) / window.innerWidth / ratio;\r\n    newmouse.y = (e.pageY - window.innerHeight / 2) / window.innerHeight * -1;\r\n    \r\n    e.preventDefault();\r\n  });\r\n}\r\n\r\nfunction onWindowResize( event ) {\r\n  renderer.setSize( window.innerWidth, window.innerHeight );\r\n  uniforms.u_resolution.value.x = renderer.domElement.width;\r\n  uniforms.u_resolution.value.y = renderer.domElement.height;\r\n  \r\n  rtTexture = new THREE.WebGLRenderTarget(window.innerWidth * .2, window.innerHeight * .2);\r\n  rtTexture2 = new THREE.WebGLRenderTarget(window.innerWidth * .2, window.innerHeight * .2);\r\n}\r\n\r\nfunction animate(delta) {\r\n  requestAnimationFrame( animate );\r\n  render(delta);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet capturer = new CCapture( { \r\n  verbose: true, \r\n  framerate: 60,\r\n  // motionBlurFrames: 4,\r\n  quality: 90,\r\n  format: 'webm',\r\n  workersPath: 'js/'\r\n } );\r\nlet capturing = false;\r\n\r\nisCapturing = function(val) {\r\n  if(val === false && window.capturing === true) {\r\n    capturer.stop();\r\n    capturer.save();\r\n  } else if(val === true && window.capturing === false) {\r\n    capturer.start();\r\n  }\r\n  capturing = val;\r\n}\r\ntoggleCapture = function() {\r\n  isCapturing(!capturing);\r\n}\r\n\r\nwindow.addEventListener('keyup', function(e) { if(e.keyCode == 68) toggleCapture(); });\r\n\r\nlet then = 0;\r\nfunction renderTexture(delta) {\r\n  // let ov = uniforms.u_buff.value;\r\n  \r\n  let odims = uniforms.u_resolution.value.clone();\r\n  uniforms.u_resolution.value.x = window.innerWidth * .2;\r\n  uniforms.u_resolution.value.y = window.innerHeight * .2;\r\n\r\n  uniforms.u_buffer.value = rtTexture2.texture;\r\n  \r\n  uniforms.u_renderpass.value = true;\r\n  \r\n//   rtTexture = rtTexture2;\r\n//   rtTexture2 = buffer;\r\n  \r\n  window.rtTexture = rtTexture;\r\n  renderer.setRenderTarget(rtTexture);\r\n  renderer.render( scene, camera, rtTexture, true );\r\n  \r\n  let buffer = rtTexture\r\n  rtTexture = rtTexture2;\r\n  rtTexture2 = buffer;\r\n\r\n  // uniforms.u_buff.value = ov;\r\n\r\n  uniforms.u_buffer.value = rtTexture.texture;\r\n  uniforms.u_resolution.value = odims;\r\n  uniforms.u_renderpass.value = false;\r\n}\r\nfunction render(delta) {\r\n  \r\n  uniforms.u_mouse.value.x += ( newmouse.x - uniforms.u_mouse.value.x ) * divisor;\r\n  uniforms.u_mouse.value.y += ( newmouse.y - uniforms.u_mouse.value.y ) * divisor;\r\n  \r\n  uniforms.u_time.value = delta * 0.0005;\r\n  renderer.render( scene, camera );\r\n  renderTexture();\r\n  \r\n  if(capturing) {\r\n    capturer.capture( renderer.domElement );\r\n  }\r\n}"],"sourceRoot":""}